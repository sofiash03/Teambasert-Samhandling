#!/usr/bin/env pybricks-micropython



from pybricks.hubs import EV3Brick
from pybricks.ev3devices import Motor, TouchSensor, ColorSensor
from pybricks.parameters import Port, Button, Color, ImageFile, SoundFile
from pybricks.tools import wait

# Skal sortere pillene som kan ha fargene rød, grønn, blå, gul
POSSIBLE_COLORS = [Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW]

# Starter brikken EV3Brick
ev3 = EV3Brick()

# Farge-array per dag
#Rød for Man, Tir, Søn
#Grønn for Man-Ons
#Blå for Tors, Søn
#Gul for Fre, Lør
red_array = [1,1,0,0,0,0,1]
green_array = [1,1,1,0,0,0,0]
blue_array = [0,0,0,1,0,0,1]
yellow_array = [0,0,0,0,1,1,0] 

# Initialiserer motorene som brukes for båndet og pilleplassering
belt_motor = Motor(Port.D)
feed_motor = Motor(Port.A)


# Initialiser berøringssensor TouchSensor. Den sjekker at beltet har kjørt
# pillerenna helt til venstre.
touch_sensor = TouchSensor(Port.S1)

# Initialiser fargesensoren ColorSensor. Den ser hvilke piller som plasseres i renna
color_sensor = ColorSensor(Port.S3)




# Loopen scanner 10 piller med fargesensor. Den sorterer de etter arrayene tidligere i koden.
# Dersom prosessen startes på nytt, så må vil den fortsette å fylle fra tidligere tilstand.
# Programmet må startes på nytt dersom man skal legge inn en ny ukes piller
while True:
   
    # Nullstiller posisjonen på motren som åpner renna. Sørger for
    # at den er i samme posisjon hver gang
    feed_motor.run_until_stalled(120, duty_limit=50)
    feed_motor.run_angle(450, -200)


    # Kjører motor til den treffer befølelsessensor.
    # Deretter setter den pillerenna på en bestemt posisjon relativt til sensor.
    # Denne posisjonen brukes for 
    belt_motor.run(-500)
    while not touch_sensor.pressed():
        pass
    belt_motor.stop()
    wait(1000)
    belt_motor.reset_angle(0)

    # Pillene som blir scannet lagres i et array
    # Vi initialiserer et tomt array som vi fyller etterhvert som vi scanner inn piller
    color_list = []


    # While-loopen ser på fargene til pillene. Den kjører til vi har lagt inn
    # alle 10 pillene. Den kan også avbrytes ved å trykke på senterknappen
    # ev3-brikken.
    while len(color_list) < 10:
        # Pilen på skjermen viser til fargesensor
        ev3.screen.load_image(ImageFile.RIGHT)

        # Skjermen viser hvor mange objekter vi har scannet
        ev3.screen.print(len(color_list))

        
        # Venter på at en ny pille blir scannet av farge-sensor, eller brudd med knapp
        while True:
            # Lagrer True eller False avhengig om knappet har blitt trykket inn
            pressed = Button.CENTER in ev3.buttons.pressed()
            # Lagrer fargen til pillen som ble målt av fargesensorer color_sensor
            color = color_sensor.color()
        
            # Bryter ut av loopen dersom man har trykket inn knappen
            # eller scannet inn en gyldig farge
            if pressed or color in POSSIBLE_COLORS:
                
                break

        if pressed:
           
            # Dersom vi brukte knappen for å si at vi er ferdige med scanning,
            # så bryter vi ut av loopen.
            # Maskinen begynner å legge ut piller
            break

        
        # Dersom vi la til en farget pille, så legger vi denne til array-et.
        ev3.speaker.beep(1000, 100)
        color_list.append(color)

       
        # Kjører en loop for å forhindre at vi scanner inn samme pille flere
        # ganger på rad. Gir en lyd når den ikke lenger ser samme farge.
        while color_sensor.color() in POSSIBLE_COLORS:
            pass
        ev3.speaker.beep(2000, 100)

        
        # Viser en pil mot midt-knappen, som man kan trykke ned dersom man er ferdig
        # med å legge inn piller
        ev3.screen.load_image(ImageFile.BACKWARD)
        wait(2000)


    # Spiller av en "ready"-lyd og viser et bilde når vi er ferdige med scanning


    ev3.speaker.play_file(SoundFile.READY)
    ev3.screen.load_image(ImageFile.EV3)

  

    # Nå sorterer vi pillene utifra fargelisten vi lagret tidligere
    # Vi gjør dette ved å kjøre gjennom hver farge i en loop
    # test_array-ene sammenlignes med farge-arrayene vi lagret tidligere
    # test_array-ene oppdateres når vi legger en pille av tilsvarende farge i en viss dag
    blue_test_array = [0,0,0,0,0,0,0]
    green_test_array = [0,0,0,0,0,0,0]
    red_test_array = [0,0,0,0,0,0,0]
    yellow_test_array = [0,0,0,0,0,0,0]
   
    for color in color_list:
        # Venter ett sekund mellom hver sortering
        wait(1000)

        # Run the conveyor belt motor to the right position based on the color.
        # Kjører beltet til riktig posisjon basert på sammenligning av listene
        # Oppdaterer test_array-et
        # Sier hvilken farge som ble lagt i dosetten
        # Legger ut en pille utifra mønsteret vi bestemte tidligere
        if color == Color.BLUE:   
            for i in range(7):
                if blue_array[i] > blue_test_array[i]:
                    belt_motor.run_target(500, 30+80*i)
                    blue_test_array[i]+=1
                    ev3.speaker.say('blue')
                    feed_motor.run_angle(1500, 180)
                    feed_motor.run_angle(1500, -180)
                    break
        elif color == Color.GREEN:
            for i in range(7):
                if green_array[i] > green_test_array[i]:
                    belt_motor.run_target(500, 30+80*i)
                    green_test_array[i]+=1
                    ev3.speaker.say('green')
                    feed_motor.run_angle(1500, 180)
                    feed_motor.run_angle(1500, -180)
                    break
        elif color == Color.YELLOW:
            for i in range(7):
                if yellow_array[i] > yellow_test_array[i]:
                    belt_motor.run_target(500, 30+80*i)
                    yellow_test_array[i]+=1
                    ev3.speaker.say('yellow')
                    feed_motor.run_angle(1500, 180)
                    feed_motor.run_angle(1500, -180)
                    break
        elif color == Color.RED:
            for i in range(7):
                if red_array[i] > red_test_array[i]:
                    belt_motor.run_target(500, 30+80*i)
                    red_test_array[i]+=1
                    ev3.speaker.say('red')
                    feed_motor.run_angle(1500, 180)
                    feed_motor.run_angle(1500, -180)
                    break
